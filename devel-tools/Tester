#!/usr/bin/perl
# Tester
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use X11::GUITest qw(StartApp WaitWindowViewable WaitWindowClose SendKeys);

my $DPExec = '../dayplanner -t dpGUIAutoTest -s';
my $MAX_WAIT_SECS = 5;
my %globalWinIds;

sub SetLocaleVars
{
	my ($LC_Setting, $LANG_Setting) = @_;
	foreach(keys(%ENV))
	{
		next unless /^(LC_|LANG)/;
		if(/^LC_/ or $_ eq 'LANG')
		{
			$ENV{$_} = $LC_Setting;
		}
		elsif (/^LANGUAGE/)
		{
			$ENV{$_} = $LANG_Setting;
		}
	}
}

sub Type
{
	foreach my $keys (@_)
	{
		SendKeys($keys);
		if ($ENV{TESTER_PARANOID_ERRORCHECKS})
		{
			if (WaitWindowViewable('(Error|Warning)', undef, 1))
			{
				die("Testing FAILED. See the GUI window for error information.\n");
			}
		}
	}
}

sub RequireWindowPresent
{
	my $win = shift;
	my ($gotWin) = WaitWindowViewable($win,undef,$MAX_WAIT_SECS);
	if (!$gotWin)
	{
		die("Unable to detect the window \"$win\"\n");
	}
	$globalWinIds{$win} = $gotWin;
	return $gotWin;
}

sub RequireWindowClosed
{
	my $win = shift;
	if ($win =~ /\D/)
	{
		if ($globalWinIds{$win})
		{
			$win = $globalWinIds{$win};
		}
		else
		{
			die("RequireWindowClosed() failed to locate the winid needed");
		}
	}
	my ($gotWin) = WaitWindowClose($win,undef,$MAX_WAIT_SECS);
	if (!$gotWin)
	{
		die("The window \"$win\" appears to have failed to close\n");
	}
}

sub MainWindowTest
{
	my $win = shift;
	my $openActions = shift;
	my $duringActions = shift;
	my $closeActions = shift;
	Type(split(/ /,$openActions));
	my ($present) = RequireWindowPresent($win);
	if ($duringActions)
	{
		Type(split(/ /,$duringActions));
	}
	if(not defined $closeActions)
	{
		$closeActions = '%(c)';
	}
	Type(split(/ /,$closeActions));
	RequireWindowClosed($present);
}

sub TestWindowOpen
{
	my $win = shift;
	my $openActions = shift;
	my $closeActions = shift;
	MainWindowTest($win,$openActions,undef,$closeActions);
}

sub PrimaryTest_24H
{
	print "Running primary test (24H)\n";
	SetLocaleVars('C', 'C');
	$ENV{DP_FORCE_24H} = 1;
	StartApp($DPExec);

	# Wait for application window to come up and become viewable. 
	RequireWindowPresent('Day Planner');

	# Basic tests
	TestWindowOpen('Add an event',"%(e)\n");
	TestWindowOpen('Preferences',"%(e){UP}\n");
	TestWindowOpen('Day Planner plugins',"%(e){DOW}\n");
	TestWindowOpen('About Day Planner',"%(h){UP}\n");
	TestWindowOpen('Import data from file',"%(c)\n");
	TestWindowOpen('Import data',"%(c){DOW}\n",'%(d)');
	TestWindowOpen('Export data',"%(c){DOW}{DOW}\n");

	# Main adding test
	MainWindowTest('Add an event',"%(e)\n","\t\t\t\t\tMyTestEvent","\n");
	MainWindowTest('Editing an event',"\t{DOW}\n");
	MainWindowTest('Editing an event',"%(e){DOW}\n");
	MainWindowTest('Editing an event',"%(e){DOW}\n","\t\t\t\tMyTestEvent_V2","\n");
	# Focus the event and delete it
	Type("{DOW}{UP}\t{DOW}{UP}%(e){DOW}{DOW}\n");
	MainWindowTest('Add an event',"%(e)\n","\n{DOW}\n\t\t\tMyTestFullDayEvent","\n");
	# Focus the event
	Type("\t\t\t\t\t{DOW}{UP}\t");
	MainWindowTest('Editing an all day event',"%(e){DOW}\n");
	# Focus the event and delete it
	Type("{DOW}{UP}\t{DOW}{UP}%(e){DOW}{DOW}\n");
	MainWindowTest('Add an event',"%(e)\n","\n{DOW}{DOW}\n\t\t\tSomeBday","\n");
	# Focus the event
	Type("\t\t\t\t\t{DOW}{UP}\t");
	MainWindowTest('Editing a birthday',"%(e){DOW}\n");
	# Focus the event and delete it
	Type("{DOW}{UP}\t{DOW}{UP}%(e){DOW}{DOW}\n");

	# Close DP
	Type('%(c)q');
	RequireWindowClosed('Day Planner');
}

sub SecondaryTest_12H
{
	print "Secondary test is stubbed\n";
}

# Run the available tests
PrimaryTest_24H();
SecondaryTest_12H();
