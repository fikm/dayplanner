#!/usr/bin/perl
# Tester
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

use strict;
use warnings;
use IO::Socket::INET;
use IO::Select;
use Getopt::Long;
use Digest::MD5 qw(md5_base64);
use Data::Dumper;
use MIME::Base64;

my %DPServices;

# Purpose: Connect to a day planner services server. Returns 
sub DPS_Connect {
	my ($Host, $Port, $User, $Password) = @_;
	# Connect
	$DPServices{socket} = IO::Socket::INET->new(
					PeerAddr => $Host,
					PeerPort => $Port,
			) or die "Unable to connect to $Host:$Port: $@\n";
	# Authenticate
	my $APIREPLY = DPS_DataSegment("APILEVEL 0");
	return("APIERROR") if DPS_ErrorIfNeeded("OK", $APIREPLY, sub { print "APIERROR\n"; DPS_Disconnect(); });
	my $AUTHREPLY = DPS_DataSegment("AUTH $User $Password");
	return("AUTHERROR") if DPS_ErrorIfNeeded("OK", $AUTHREPLY, sub { print "AUTHERROR\n"; DPS_Disconnect(); });
	return("OK");
}

sub DPS_ErrorIfNeeded {
	my ($Expected, $Recieved, $ErrorSub) = @_;
	unless($Expected eq $Recieved) {
		$ErrorSub->($Recieved);
		return(1);
	} else {
		return(0);
	}
}

sub DPS_Disconnect {
	my $Socket = $DPServices{socket};
	close($Socket);
	delete($DPServices{socket});
	return(1);
}

sub DPS_DataSegment {
	my $Socket = $DPServices{socket};
	print $Socket "$_[0]\n";
	my $Data = <$Socket>;
	chomp($Data);
	return($Data);
}

sub DPS_GetData {
	my $CONReply = DPS_Connect("localhost", 1500, "zerodogg", "123");
	if($CONReply eq "APIERROR") {
		# Api ERROR message
		return(undef);
	} elsif($CONReply eq "AUTHERROR") {
		# Auth error message
		return(undef);
	}
	my $Data = DPS_DataSegment("GETDATA");
	if($Data =~ /^OK/) {
		my $Initial = $Data;
		my $MD5 = $Data;
		my $MainData = $Data;
		$Initial =~ s/^(\S+)\s+.*$/$1/;
		$MD5 =~ s/^(\S+)\s+(\S+)\s+.*/$2/;
		$MainData =~ s/^(\S+)\s+(\S+)\s+(\S+)\s*$/$3/;
		unless(md5_base64($MainData) eq $MD5) {
			print "MD5 mismatch!\n";
		} else {
			print decode_base64($MainData);
		}
	} else {
		print "Error recieveing data\n";
		# Error...
	}
	DPS_Disconnect();
	return(1);
}

DPS_GetData();
